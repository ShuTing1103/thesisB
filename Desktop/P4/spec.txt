ProcChat

1. localised chat server that will support a number of clients through named pipes(FIFOs)
	1. The server and client applications will communicate through a fixed sized binary protocol.
	2. The server will manage a global named pipe for establishing connections,
	    after a connection has bee established,
		it will construct a separate read and write named pipes for the client to utilise.
	3. The client will communicate to the server over the named pipes.
	4. The server must be able to read from all clients asynchronously.

2. Global Process 
	1. The global server is involved in facilitating the initial connection from clients.
	2. The initial message from the client will be an identifer prefix for the named pipes to be constructed.
	3. The client will read and write to the respective piped that are post fixed with _RD and _WR.
	
	4. This process will be responsible for creating the separete client handler daemons responding to each client as a separate process.
	5. This processes will need to listen to all messages sent from the client and write to back to the client and any other client's named pipe 
	to relay messages from client to others.

	6. The global event pipe goes by the name gevent, 
	this pipe should only be read by the global process 
	but can be written to by any other process.

3. Client-Handler
	1. A client-handler is spawned when a client is connected
	2. A clinet-handler will be relegated to a specifc domain.
	3. A domain is simply a folder relative to the current working directory.

4. The Protocol
	1. The system w=uses a binary message protocol to facilitate communication between the server, client-handler and client.
	2. The server and client interaction is simply for acknowledgement and setting up the named pipes.
	3. The main protocol will be used between the client-handler and the client.
	4. The client-handler is spawned by the global server process to handle a clinet and will communicate with the client.
	
	5. The binary message is broken up two parts:
		1. The first part being the type of message 
		2. The second part being content related to the type.
	The type will determine how to interpret the contents in the second part.
	Each message is 2048 bytes.
	
5. GlobalProcess-Client Protocol
		CONNECT <identifier><domain>
	1. Type Decimal: 0
	2. Type Binary:  00000000 00000000
	3. The client will connect to the server, the server will construct two named pipes the identfier.
	4. The client is expected to connect to the named pipes after sending a well formed connect message to the server.
	5. The identifier part of the message is maximum 256 charaters ASCII encoded.
	6. The domain componet will map to a folder relative to the current working directory.

6. ClientHandler-Client Protocol
		SAY <message>
	1. Type Decimal: 1
	2. Type Binary: 00000000 00000001
	3. Packet Layout:
		1. Type: 2 Bytes
		2. Message: 1790 bytes, ASCII characters
	The client will send the SAY command to the client-handler, 
	the clinet-handler will need to relay this to all other clients that are connected to same domain 
	using the RECEIVE message. The contents maximum is 1790 charaters.
	
		SAYCONT <message> <termination>
	1. Type Decimal: 2
	2. Type Binary: 00000000 00000010
	3. Packet Layout:
	4. Type: 2 Bytes
	5. Message: 1789bytes, ASCII characters 
	6. Termination: 1byte, 255 indicates termination
	The client will send the SAYCONT command to the client-handler, 
	this is a variation on SAY in which the server will relay the message as a RECVCONT. 
	SAY command typically sends one message within 2046 bytes of its message contents. 
	SAYCONT reserves the 2046th byte as a termination byte for the message's contents, 
	when the termination byte represents the value 255, the message is considered complete. 
	The maximum message is 1789 characters.
	The buffering of the SAYCONT messages will occur on client side. Note this detail when testing.
		
		RECEIVE <identifier> <message>
	1. Type Decimal: 3 
	2. Type Binary: 00000000 00000011
	3. Packet Layout:
		Type: 2bytes 
		Identifier: 256bytes 
		Message: 1790bytes
	This message is sent from the client-handler to all other clients (excludes sender).
	When a client has sent a SAY message to the client-handler,
	the client-handler relays the message along with the identifier to all other clients in the domain. 
	The contents (2046 bytes) where the first 256 bytes are reserved for the identifier and the 1790 bytes afterwards is the message.

		RECVCONT <identifier> <message> <termination>
	Type Decimal: 4 
	Type Binary: 00000000 00000100
	Packet Layout:
		Type: 2bytes 
		Identifier: 256bytes 
		Message: 1789bytes Termination: 1byte
	Similar to SAYCONT, 
	the client handler will be sending the message in chunks to the client. 
	The message will contain an identifier (who sent it) and send termination byte.
	The buffering of the RECVCONT messages will occur on client side. Note this detail when testing.
	
		DISCONNECT
	Type Decimal: 7 
	Type Binary: 00000000 00000111
	Packet Layout:
		Type: 2bytes
	This message is sent from the client to the client-handler. 
	This will tell the client-handler that the FIFOs can be removed and the handler can be terminated.

7. Extension
		PING
	Type Decimal: 5 
	Type Binary: 00000000 00000101
	Packet Layout:
		Type: 2bytes
	The PING message is sent from the clinet-handler to the client.
	This is to check that the client is still alive in the event the process crashed.
	This extension requires some form of asynchronous IP to be implemented.
	The PING message is sent every 15 seconds form the server.

		PONG
	
	Type Decimal: 6 
	Type Binary: 00000000 00000110
	Packet Layout:
		Type: 2bytes
	The PONG message is sent from the client to the client-handler. 
	This is the response to the PING message being sent from the server to check if it is still alive.

	Daemon Alive
	Each client-handler will send a signal to the global process under SIGUSER1
	to indicate that it is shutting down.
	The global process can use this information, to clean up the process before the child becomes a zombie process.
	
	As an extension, you are required to implement PING and PONG messages 
	that will check that the client is still alive. 
	Every 15 seconds, the clinet-handler will send a PING message to a client,
	requiring the clinet to respond to the message with PONG.

8. Restrictions	
	You are orohibited from using thread within this assignment.
	Communication between users in the chat room must be facilitated via the client handler.
	The client handler will be separate process form the global process.
		1. No VLAs
		2. No Excessive CPU usage
		3. No Zombie Processes (clean up your processes when you can)
	